[gd_scene load_steps=15 format=3 uid="uid://crrwp2iqodyj1"]

[ext_resource type="Script" path="res://game/intermission/intermission.gd" id="1_ay0xj"]
[ext_resource type="Script" path="res://game/intermission/scoring/scoring_ui.gd" id="2_feipp"]
[ext_resource type="Script" path="res://game/intermission/results/results_ui.gd" id="3_nahkx"]
[ext_resource type="PackedScene" uid="uid://dj3tk57280b5w" path="res://game/intermission/spellbook/spellbook_ui.tscn" id="5_ml6ev"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_1pv4n"]

[sub_resource type="LabelSettings" id="LabelSettings_h4v1i"]
font_size = 128

[sub_resource type="LabelSettings" id="LabelSettings_iy6gk"]
font_size = 128

[sub_resource type="LabelSettings" id="LabelSettings_gh480"]
font_size = 48

[sub_resource type="LabelSettings" id="LabelSettings_7vyf4"]
font_size = 32

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_hwk56"]
bg_color = Color(0.294118, 0.294118, 0.294118, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_25405"]
bg_color = Color(0.392157, 0.392157, 0.392157, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_sftsf"]
bg_color = Color(0.392157, 0.392157, 0.392157, 1)

[sub_resource type="LabelSettings" id="LabelSettings_ah1rl"]
font_size = 48

[sub_resource type="GDScript" id="GDScript_5bmiv"]
script/source = "extends IntermissionUI

signal all_players_readied

var player_data: Dictionary
var other_players_data: Dictionary
var readied_players: Array[int]

var modifying_player_card: CenterContainer
var perk_page_count: int
var spell_page_count: int


func setup_on_server():
	if not multiplayer.is_server(): return
	
	for player in intermission.game_manager.players:
		_init_modifying_player_card(player)
		_init_other_players_page_progress_ui(player)


func _init_modifying_player_card(player: Player):
	const PAGE_COUNT_BUFFER = 1
	var perk_page_count = intermission.game_manager.perks_manager.get_player_perk_choice_count(player)
	var perk_pages_dictionary = _get_generated_perks_dictionary(player, perk_page_count)
	var spell_page_count = _get_spell_page_count(player)
	player.spell_inventory.set_spell_page_count(0)
	
	var created_player_data: Dictionary = {
		\"peer_id\": player.peer_id,
		\"name\": player.get_display_name(),
		\"node_path\": player.get_path(),
		\"perk_pages\": perk_pages_dictionary,
		\"spell_pages\": spell_pages_dictionary
	}
	
	_create_modifying_player_card.rpc_id(player.peer_id, created_player_data)
	
	var perk_page = preload(\"res://game/intermission/modifying/ui_pages/perk_page.tscn\").instantiate()
	modifying_player_card.load_page(perk_page)
	perk_page.setup(perks)
	perk_page.perk_chosen.connect(perk_chosen_callable)
	_append_page(perk_page, PageType.PERK)


@rpc(\"authority\", \"call_local\", \"reliable\")
func _load_next_page():
	if perk_page_count > 0:
		var perks_array = _get_generated_perks_array(player)
		_load_next_perk_page.rpc_id(player.peer_id, perks_array)
		perk_page_count -= 1
		return
	
	_ready_player_on_server.rpc_id(1, player_data[\"peer_id\"])


func _get_generated_perks_array(player: Player) -> Array[String]:
	var result: Array[String]
	
	var perk_pool = intermission.game_manager.game_settings.perk_pool
	for perk in perk_pool.get_random_perks(3, false):
		result.append(perk)
	
	return result


@rpc(\"authority\", \"call_local\", \"reliable\")
func _load_next_perk_page(player_data: Dictionary):
	if perk_page_count <= 0:
		_load_next_perk_page()
	
	var perk_page = preload(\"res://game/intermission/modifying/ui_pages/perk_page.tscn\").instantiate()
	modifying_player_card.load_page(perk_page)
	perk_page.setup(perks)
	perk_page.perk_chosen.connect(perk_chosen_callable)
	_append_page(perk_page, PageType.PERK)

func _get_generated_perks_dictionary(player: Player, perk_page_count: int) -> Dictionary:
	var result: Dictionary
	
	var perk_pool = intermission.game_manager.game_settings.perk_pool
	for i in range(perk_page_count):
		var perk_page = i + 1
		var perks = perk_pool.get_random_perks(3, false)
		
		result[perk_page] = []
		for perk in perks:
			result[perk_page].append(perk.resource_path)
	
	return result


func _get_spell_page_count(player: Player) -> int:
	var default_spell_page_count = intermission.game_manager.game_settings.default_spell_page_count
	var player_spell_page_count = player.spell_inventory.spell_page_count
	return default_spell_page_count + player_spell_page_count


func _get_spell_pages_dictionary(player: Player, spell_page_count: int) -> Dictionary:
	var result: Dictionary
	
	var spell_pool = intermission.game_manager.game_settings.spell_pool
	for i in range(spell_page_count):
		var spell_page = i + 1
		var spell_types = spell_pool.get_lacking_random_spells(3, player)
		
		result[spell_page] = []
		for spell_type in spell_types:
			result[spell_page].append(spell_type)
	
	return result


func _init_other_players_page_progress_ui(player: Player):
	var other_players_data: Dictionary
	for other_player in intermission.game_manager.players:
		if player != other_player:
			other_players_data[other_player.peer_id] = {
				\"peer_id\": other_player.peer_id,
				\"name\": str(other_player.name)
			}
	_create_other_players_page_progress_ui.rpc_id(player.peer_id, other_players_data)


@rpc(\"authority\", \"call_local\", \"reliable\")
func _create_modifying_player_card(player_data: Dictionary):
	self.player_data = player_data
	
	for child in %SingleModifyingPlayerCardSlot.get_children():
		child.queue_free()
	
	modifying_player_card = preload(\"res://game/intermission/modifying/modifying_player_card.tscn\").instantiate()
	%SingleModifyingPlayerCardSlot.add_child(modifying_player_card)
	# Setup must come after ModifyingPlayerCard enters the scene
	# tree, in order to the player scene absolute path to be valid.
	modifying_player_card.setup(player_data)
	modifying_player_card.page_updated.connect(_handle_page_change)
	modifying_player_card.perk_obtained.connect(_handle_perk_obtained.bind(player_data))
	modifying_player_card.spell_obtained.connect(_handle_spell_obtained.bind(player_data))
	
	#var perk_pages = player_data[\"perk_pages\"]
	#for perk_page in perk_pages:
		#modifying_player_card.create_perk_page(perk_pages[perk_page])
		#await modifying_player_card.spellbook.open_page.finished
	#
	#var spell_pages = player_data[\"spell_pages\"]
	#for spell_page in spell_pages:
		#modifying_player_card.create_spell_page(spell_pages[spell_page])
	#
	#var player = get_tree().root.get_node_or_null(player_data[\"node_path\"])
	#modifying_player_card.spellbook.append_inventory_page(
		#player,
		#func():
			#modifying_player_card.load_next_page()
	#)
	#
	#modifying_player_card.spellbook.append_ready_page(
		#func():
			#modifying_player_card.load_previous_page()
	#)
	#
	#_load_first_page()


func _handle_page_change(current_page: int, max_page: int):
	for other_player_data in other_players_data:
		var peer_id = other_players_data[other_player_data][\"peer_id\"]
		
		_update_other_player_page_progress_ui.rpc_id(
			peer_id,
			player_data[\"peer_id\"],
			current_page,
			max_page
		)
	
	if max_page == current_page:
		_ready_player_on_server.rpc_id(1, player_data[\"peer_id\"])
	else:
		_unready_player_on_server.rpc_id(1, player_data[\"peer_id\"])


func _handle_perk_obtained(perk_resource_path: String, player_data: Dictionary):
	_handle_perk_obtained_on_server.rpc_id(1, perk_resource_path, player_data[\"peer_id\"])


@rpc(\"any_peer\", \"call_local\", \"reliable\")
func _handle_perk_obtained_on_server(perk_resource_path: String, executor_peer_id: int):
	var executor_player = intermission.game_manager.get_player_from_peer_id(executor_peer_id)
	intermission.game_manager.perks_manager.execute_perk(
		load(perk_resource_path), executor_player
	)


func _handle_spell_obtained(spell_type: Spells.Type, player_data: Dictionary):
	_handle_spell_obtained_on_server.rpc_id(1, spell_type, player_data[\"peer_id\"])


@rpc(\"any_peer\", \"call_local\", \"reliable\")
func _handle_spell_obtained_on_server(spell_type: Spells.Type, executor_peer_id: int):
	var executor_player = intermission.game_manager.get_player_from_peer_id(executor_peer_id)
	executor_player.spell_inventory.set_level.rpc(spell_type, 1)


@rpc(\"authority\", \"call_local\", \"reliable\")
func _create_other_players_page_progress_ui(other_players_data: Dictionary):
	self.other_players_data = other_players_data
	
	for other_player_data in other_players_data:
		var other_player_name = other_players_data[other_player_data][\"name\"]
		
		var other_player_page_progress = preload(\"res://game/intermission/modifying/online/other_player_page_progress_ui.tscn\").instantiate()
		other_player_page_progress.setup(other_player_name)
		%OtherPlayerPageProgressContainer.add_child(other_player_page_progress)
		
		other_players_data[other_player_data][\"ui_node\"] = other_player_page_progress


@rpc(\"any_peer\", \"call_local\", \"reliable\")
func _update_other_player_page_progress_ui(other_player_peer_id: int, current_page: int, max_page: int):
	for other_player_data in other_players_data:
		var peer_id = other_players_data[other_player_data][\"peer_id\"]
		if peer_id == other_player_peer_id:
			var ui_node = other_players_data[other_player_data][\"ui_node\"]
			ui_node.update(current_page, max_page)


@rpc(\"any_peer\", \"call_local\", \"reliable\")
func _ready_player_on_server(player_peer_id: int):
	if not readied_players.has(player_peer_id):
		readied_players.append(player_peer_id)
	
	var total_player_count = other_players_data.size() + 1
	if readied_players.size() == total_player_count:
		all_players_readied.emit()


@rpc(\"any_peer\", \"call_local\", \"reliable\")
func _unready_player_on_server(player_peer_id: int):
	if readied_players.has(player_peer_id):
		readied_players.erase(player_peer_id)
"

[node name="Intermission" type="Node"]
script = ExtResource("1_ay0xj")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_1pv4n")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
z_index = -100
custom_minimum_size = Vector2(1920, 1080)
offset_right = 1920.0
offset_bottom = 1080.0
color = Color(0.0980392, 0.0980392, 0.0980392, 1)

[node name="StartUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Title" type="Label" parent="CanvasLayer/StartUI"]
layout_mode = 2
text = "Intermission Starting"
label_settings = SubResource("LabelSettings_h4v1i")

[node name="ScoringUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("2_feipp")

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/ScoringUI"]
layout_mode = 2
theme_override_constants/separation = 100

[node name="Title" type="Label" parent="CanvasLayer/ScoringUI/VBoxContainer"]
layout_mode = 2
text = "Scoring"
label_settings = SubResource("LabelSettings_iy6gk")
horizontal_alignment = 1

[node name="PlayerScoreCards" type="VBoxContainer" parent="CanvasLayer/ScoringUI/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
alignment = 1

[node name="VBoxContainer2" type="VBoxContainer" parent="CanvasLayer/ScoringUI/VBoxContainer"]
layout_mode = 2

[node name="ScoringEventTitleLabel" type="Label" parent="CanvasLayer/ScoringUI/VBoxContainer/VBoxContainer2"]
unique_name_in_owner = true
layout_mode = 2
text = "Severity 2 Disaster Survived"
label_settings = SubResource("LabelSettings_gh480")
horizontal_alignment = 1

[node name="ScoringEventSubtitleLabel" type="Label" parent="CanvasLayer/ScoringUI/VBoxContainer/VBoxContainer2"]
unique_name_in_owner = true
layout_mode = 2
text = "+2 Points"
label_settings = SubResource("LabelSettings_7vyf4")
horizontal_alignment = 1

[node name="ResultsUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("3_nahkx")

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/ResultsUI"]
layout_mode = 2
theme_override_constants/separation = 100

[node name="Title" type="Label" parent="CanvasLayer/ResultsUI/VBoxContainer"]
layout_mode = 2
text = "Results"
label_settings = SubResource("LabelSettings_iy6gk")
horizontal_alignment = 1

[node name="PlayerResultCards" type="VBoxContainer" parent="CanvasLayer/ResultsUI/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
alignment = 1

[node name="HBoxContainer" type="HBoxContainer" parent="CanvasLayer/ResultsUI/VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="ContinueButton" type="Button" parent="CanvasLayer/ResultsUI/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(480, 96)
layout_mode = 2
focus_neighbor_left = NodePath("../SetSlot3Button")
focus_neighbor_top = NodePath("../../HBoxContainer2/AbilityList")
focus_neighbor_right = NodePath("../SetSlot2Button")
focus_next = NodePath("../SetSlot2Button")
focus_previous = NodePath("../../HBoxContainer2/AbilityList")
theme_override_font_sizes/font_size = 48
theme_override_styles/hover = SubResource("StyleBoxFlat_hwk56")
theme_override_styles/pressed = SubResource("StyleBoxFlat_25405")
theme_override_styles/normal = SubResource("StyleBoxFlat_sftsf")
text = "Continue
"

[node name="WaitingForHostLabel" type="Label" parent="CanvasLayer/ResultsUI/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Waiting for host..."
label_settings = SubResource("LabelSettings_ah1rl")
horizontal_alignment = 1

[node name="ModifyingOnlineUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_5bmiv")

[node name="HBoxContainer" type="HBoxContainer" parent="CanvasLayer/ModifyingOnlineUI"]
layout_mode = 2
theme_override_constants/separation = 0

[node name="SingleModifyingPlayerCardSlot" type="CenterContainer" parent="CanvasLayer/ModifyingOnlineUI/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2

[node name="ModifyingPlayerCard" parent="CanvasLayer/ModifyingOnlineUI/HBoxContainer/SingleModifyingPlayerCardSlot" instance=ExtResource("5_ml6ev")]
layout_mode = 2
script = null

[node name="OtherPlayerPageProgressContainer" type="VBoxContainer" parent="CanvasLayer/ModifyingOnlineUI/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(480, 0)
layout_mode = 2
theme_override_constants/separation = 32
alignment = 1

[node name="ModifyingLocalUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
visible = false
offset_right = 40.0
offset_bottom = 40.0

[node name="EndUI" type="CenterContainer" parent="CanvasLayer"]
unique_name_in_owner = true
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Title" type="Label" parent="CanvasLayer/EndUI"]
layout_mode = 2
text = "Intermission Ending"
label_settings = SubResource("LabelSettings_h4v1i")

[connection signal="pressed" from="CanvasLayer/ResultsUI/VBoxContainer/HBoxContainer/ContinueButton" to="CanvasLayer/ResultsUI" method="_on_continue_button_pressed"]
